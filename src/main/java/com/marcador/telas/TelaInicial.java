package com.marcador.telas;

import com.marcador.jasper.ReportVIsualizarPontos;
import com.marcador.util.DataHora;
import com.marcador.util.HorasTrabalhadas;
import com.marcador.util.MarcacaoCorrente;
import com.marcador.util.MarcacaoPonto;
import com.marcador.util.PontoUtil;
import com.marcador.util.PropertiesUtil;
import com.marcador.util.Request;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.apache.commons.collections4.map.HashedMap;

/**
 *
 * @author Jose.leite
 * @author vitor.santos
 */
public class TelaInicial extends javax.swing.JFrame {

    String regexData = "^([0-2][0-9]|(3)[0-1])(\\/)(((0)[0-9])|((1)[0-2]))(\\/)\\d{4}$";
    MarcacaoCorrente    marcacaoCorrente = new MarcacaoCorrente();   
    Map<String, String> dataHora;
    /**
     * Creates new form Tela1
     */
    public TelaInicial() {
        initComponents();
        ImageIcon img = new ImageIcon("icon.png");
        setIconImage(img.getImage());
        LocalDate date = LocalDate.now();
        txtData.setText(date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        txtArea.setText(Request.retorno());
        txtArea.setLineWrap(true);
        txtHora.requestFocus(true);
        atualizarHoras(false);
        System.out.println(new File("q  aa").exists()?"eu":"ele");
        
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtData = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        btnMarcarPonto = new javax.swing.JButton();
        txtHora = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        H2 = new javax.swing.JFormattedTextField();
        H1 = new javax.swing.JFormattedTextField();
        H3 = new javax.swing.JFormattedTextField();
        H6 = new javax.swing.JFormattedTextField();
        H5 = new javax.swing.JFormattedTextField();
        H4 = new javax.swing.JFormattedTextField();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Marcação de Ponto");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataFocusLost(evt);
            }
        });

        jLabel4.setText("Data e Hora:");

        btnMarcarPonto.setText("Marcar Ponto");
        btnMarcarPonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarPontoActionPerformed(evt);
            }
        });

        try {
            txtHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraActionPerformed(evt);
            }
        });

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        jLabel1.setText("Horários");

        jButton1.setText("Dia Atual");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Abrir Arquivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        try {
            H2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        H2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                H2FocusLost(evt);
            }
        });

        try {
            H1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        H1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                H1FocusLost(evt);
            }
        });

        try {
            H3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        H3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                H3FocusLost(evt);
            }
        });

        try {
            H6.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        H6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                H6FocusLost(evt);
            }
        });

        try {
            H5.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        H5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                H5FocusLost(evt);
            }
        });

        try {
            H4.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        H4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                H4FocusLost(evt);
            }
        });

        jMenu2.setText("Configurações");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Alterar Configurações");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar2.add(jMenu2);

        jMenu3.setText("Avançado");

        jMenuItem3.setText("Apontamentos");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);
        jMenu3.add(jSeparator2);

        jMenuItem2.setText("Ordenar Arquivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar2.add(jMenu3);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(H6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(H5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(H4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(H3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMarcarPonto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(H2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(H1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(H1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(H2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnMarcarPonto)
                            .addComponent(jButton2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(H3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(H4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(H5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(H6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMarcarPontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarPontoActionPerformed
        try {
            if (PropertiesUtil.existeConfig()) {
                if (atualizarHoras(true)) {

                    File file = PropertiesUtil.getFile();
                    if (file.exists()) {
                        String marcacao;
                        try ( FileWriter fw = new FileWriter(file, true);  BufferedWriter bw = new BufferedWriter(fw)) {
                            bw.newLine();
                            marcacao = dataHora();
                            String ponto = PropertiesUtil.getPIS() + marcacao.replace(" ", "");
                            bw.write(ponto);
                        }
                        JOptionPane.showMessageDialog(this, "Marcação realizada: " + marcacao, "", JOptionPane.INFORMATION_MESSAGE);
                        txtHora.setText("");
                        atualizarHoras(false);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Configurações não encontradas", "Erro", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(TelaInicial.class.getName()).logp(Level.SEVERE, TelaInicial.class.getName(), "Gravar Ponto", "Configurações não encontradas");
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnMarcarPontoActionPerformed

    private void txtHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        TelaDeConfiguracao tela = new TelaDeConfiguracao();
        tela.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void txtDataFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataFocusLost
        atualizarHoras(false);
        txtHora.setText("");
    }//GEN-LAST:event_txtDataFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LocalDate date = LocalDate.now();
        txtData.setText(date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        atualizarHoras(false);
        txtHora.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        List<ReportVIsualizarPontos> reports = new ArrayList<>();
        DataHora dateHour = getDateHour();
        Map<String,Object> parameters = new HashedMap<>();
        float horasPositivas = 0;
        float horasNegativas = 0;
        for (MarcacaoPonto d : dateHour.getDatas()) {
            ReportVIsualizarPontos dayReport = new ReportVIsualizarPontos();
            dayReport.setData(d.getData());
            HorasTrabalhadas hotasT = PontoUtil.calcularHoras(d.getHoras());
            dayReport.setTotal(hotasT.getTrabalhadas());
            dayReport.setPositivas(hotasT.getPositivas());
            dayReport.setNegativas(hotasT.getNegativas());
            dayReport.setDia(d.getDia());
            horasNegativas += hotasT.getHorasNegativas();
            horasPositivas += hotasT.getHorasPositivas();

            for (LocalTime h : d.getHoras()) {
                dayReport.setHoras(h);
            }
            reports.add(dayReport);
        }
        try {
            parameters.put("POSITIVAS", HorasTrabalhadas.toHora(horasPositivas));
            parameters.put("NEGATIVAS", HorasTrabalhadas.toHora(horasNegativas));
            parameters.put("TOTAL", HorasTrabalhadas.calcularHoras(horasPositivas-horasNegativas));
            PontoUtil.GerarReportApontamentos(reports,parameters);
        } catch (Exception ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            DataHora hourOrder = getDateHour();
            hourOrder.ordenar();
            File file = PropertiesUtil.getFile();
            if (file.exists()) {
                try ( FileWriter fw = new FileWriter(file, false);  BufferedWriter bw = new BufferedWriter(fw)) {
                    bw.write("PIS	Data	Hora");
                    for (MarcacaoPonto date : hourOrder.getDatas()) {
                        String dateFormatter = date.getData().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                        for (LocalTime time : date.getHoras()) {
                            String timeFormatter = time.format(DateTimeFormatter.ofPattern("HH:mm"));
                            bw.newLine();
                            bw.write(PropertiesUtil.getPIS() + dateFormatter + timeFormatter);
                        }
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "Ordenação Realizada", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Runtime run = Runtime.getRuntime();
            String[] arquivo = {"notepad "+PropertiesUtil.getCaminho()+File.separator+ PropertiesUtil.getFileName()};
            run.exec(String.join("& ", arquivo));
        } catch (IOException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void H1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_H1FocusLost
        if (isChange(H1.getText(),  marcacaoCorrente.getHora1())) {
            marcacaoCorrente.setHora1(H1.getText());
            dataHora.put(marcacaoCorrente.getChave1(),   marcacaoCorrente.getHora1());
            atualizarHorasManual();
        }
    }//GEN-LAST:event_H1FocusLost

    private void H2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_H2FocusLost
        if (isChange(H2.getText(),  marcacaoCorrente.getHora2())) {
            marcacaoCorrente.setHora2(H2.getText());
            dataHora.put(marcacaoCorrente.getChave2(),   marcacaoCorrente.getHora2());
            atualizarHorasManual();
        }
    }//GEN-LAST:event_H2FocusLost

    private void H3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_H3FocusLost
        if (isChange(H3.getText(),  marcacaoCorrente.getHora3())) {
            marcacaoCorrente.setHora3(H3.getText());
            dataHora.put(marcacaoCorrente.getChave3(),   marcacaoCorrente.getHora3());
            atualizarHorasManual();
        }
    }//GEN-LAST:event_H3FocusLost

    private void H4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_H4FocusLost
        if (isChange(H4.getText(),  marcacaoCorrente.getHora4())) {
            marcacaoCorrente.setHora4(H4.getText());
            dataHora.put(marcacaoCorrente.getChave4(),   marcacaoCorrente.getHora4());
            atualizarHorasManual();
        }
    }//GEN-LAST:event_H4FocusLost

    private void H5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_H5FocusLost
        if (isChange(H5.getText(),  marcacaoCorrente.getHora5())) {
            marcacaoCorrente.setHora5(H5.getText());
            dataHora.put(marcacaoCorrente.getChave5(),   marcacaoCorrente.getHora5());
            atualizarHorasManual();
        }
    }//GEN-LAST:event_H5FocusLost

    private void H6FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_H6FocusLost
        if (isChange(H6.getText(),  marcacaoCorrente.getHora6())) {
            marcacaoCorrente.setHora6(H6.getText());
            dataHora.put(marcacaoCorrente.getChave6(),   marcacaoCorrente.getHora6());
            atualizarHorasManual();
        }
    }//GEN-LAST:event_H6FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);
              
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField H1;
    private javax.swing.JFormattedTextField H2;
    private javax.swing.JFormattedTextField H3;
    private javax.swing.JFormattedTextField H4;
    private javax.swing.JFormattedTextField H5;
    private javax.swing.JFormattedTextField H6;
    private javax.swing.JButton btnMarcarPonto;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JFormattedTextField txtHora;
    // End of variables declaration//GEN-END:variables


    private boolean isChange(String newValue,String oldValue){
        return (!newValue.equals(oldValue)&& !newValue.replaceAll("[: ]", "").equals(""));
    }
    
    private boolean atualizarHoras(boolean limite) {
        if (txtData.getText().matches(regexData)) {
            List<String> horasDia = new ArrayList<>();
            dataHora = PontoUtil.obterDatas();

            if (!dataHora.isEmpty()) {
                int qtdHoras = 1;
                for (String data : dataHora.keySet()) {
                    if (data.contains(txtData.getText())) {
                        if(qtdHoras==1)
                            marcacaoCorrente.setChave1(data);
                        if(qtdHoras==2)
                            marcacaoCorrente.setChave2(data);
                        if(qtdHoras==3)
                            marcacaoCorrente.setChave3(data);
                        if(qtdHoras==4)
                            marcacaoCorrente.setChave4(data);
                        if(qtdHoras==5)
                            marcacaoCorrente.setChave5(data);
                        if(qtdHoras==6)
                            marcacaoCorrente.setChave6(data);
                        
                        horasDia.add(dataHora.get(data));
                        qtdHoras++;
                    }
                }
                if (limite && horasDia.size() >= 6) {
                    String[] ops = {"Adicionar", "Cancelar"};
                    int resp = JOptionPane.showOptionDialog(rootPane, "Seis apontamentos encontrados para a data informada. \n Deseja adicionar um novo apontamento?", "Atenção", JOptionPane.YES_OPTION, JOptionPane.NO_OPTION, null, ops, ops[0]);

                    return resp == 0;
                }

                if (!horasDia.isEmpty()) {
                    H1.setText(horasDia.get(0));
                    marcacaoCorrente.setHora1(horasDia.get(0));
                    H1.setEditable(true);
                } else {
                    limparHoras();
                }
                if (horasDia.size() > 1) {
                    H2.setText(horasDia.get(1));
                    marcacaoCorrente.setHora2(horasDia.get(1));
                    H2.setEditable(true);
                } else {
                    H2.setText("");
                    marcacaoCorrente.setHora2("");
                    H2.setEditable(false);
                }
                if (horasDia.size() > 2) {
                    H3.setText(horasDia.get(2));
                    marcacaoCorrente.setHora3(horasDia.get(2));
                    H3.setEditable(true);
                } else {
                    H3.setText("");
                    marcacaoCorrente.setHora3("");
                    H3.setEditable(false);
                }
                if (horasDia.size() > 3) {
                    H4.setText(horasDia.get(3));
                    marcacaoCorrente.setHora4(horasDia.get(3));
                    H4.setEditable(true);
                } else {
                    H4.setText("");
                    marcacaoCorrente.setHora4("");
                    H4.setEditable(false);
                }
                if (horasDia.size() > 4) {
                    H5.setText(horasDia.get(4));
                    marcacaoCorrente.setHora5(horasDia.get(4));
                    H5.setEditable(true);
                } else {
                    H5.setText("");
                    marcacaoCorrente.setHora5("");
                    H5.setEditable(false);
                }
                if (horasDia.size() > 5) {
                    H6.setText(horasDia.get(5));
                    marcacaoCorrente.setHora6(horasDia.get(5));
                    H6.setEditable(true);
                } else {
                    H6.setText("");
                    marcacaoCorrente.setHora6("");
                    H6.setEditable(false);
                }

            } else {
                limparHoras();
            }
        }
        return true;
    }

    private void limparHoras() {
        H1.setText("");
        H2.setText("");
        H3.setText("");
        H4.setText("");
        H5.setText("");
        H6.setText("");
        H1.setEditable(false);
        H2.setEditable(false);
        H3.setEditable(false);
        H4.setEditable(false);
        H5.setEditable(false);
        H6.setEditable(false);
        marcacaoCorrente.setHora1("");
        marcacaoCorrente.setHora2("");
        marcacaoCorrente.setHora3("");
        marcacaoCorrente.setHora4("");
        marcacaoCorrente.setHora5("");
        marcacaoCorrente.setHora6("");

    
    }

    private void atualizarHorasManual() {
       try {
            File file = PropertiesUtil.getFile();
            try ( FileWriter fw = new FileWriter(file, false);  BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write("PIS	Data	Hora");
                for (Map.Entry<String, String> entry : dataHora.entrySet()) {
                    String key = entry.getKey();
                    String value = entry.getValue();
                    bw.newLine();
                    bw.write(PropertiesUtil.getPIS() + key.substring(1) + value);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private DataHora getDateHour() {
        Map<String, String> mapDateHour = PontoUtil.obterDatas();
        DataHora dateHour = new DataHora();
        for (String data : mapDateHour.keySet()) {
            LocalDate date = LocalDate.parse(data.substring(1), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalTime time = LocalTime.parse(mapDateHour.get(data), DateTimeFormatter.ofPattern("HH:mm"));
            dateHour.addData(date);
            dateHour.salvarHora(date, time);
        }
        return dateHour;
    }

    private String dataHora() {
        LocalTime time = LocalTime.now();
        if (txtHora.getText().replace(":", "").isBlank()) {
            return txtData.getText() + " " + time.format(DateTimeFormatter.ofPattern("HH:mm"));
        } else {
            return txtData.getText() + " " + txtHora.getText();
        }
    }

}
